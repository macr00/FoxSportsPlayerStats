package com.foxsportsplayerstats.network

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

@JsonClass(generateAdapter = true)
data class PlayerMatchStats(
    val errors: Int? = 0,
    val goals: Int? = 0,
    val intercepted: Int? = 0,
    val intercepts: Int? = 0,
    val kicks: Int? = 0,
    val points: Int? = 0,
    val possessions: Int? = 0,
    val runs: Int? = 0,
    val tackles: Int? = 0,
    val tries: Int? = 0,
    @Json(name = "mins_played") val minsPlayed: Int? = 0,
    @Json(name = "attacking_kicks") val attackingKicks: Int? = 0,
    @Json(name = "bombs_caught") val bombsCaught: Int? = 0,
    @Json(name = "bombs_dropped") val bombsDropped: Int? = 0,
    @Json(name = "charged_down") val chargedDown: Int? = 0,
    @Json(name = "charges_down") val chargesDown: Int? = 0,
    @Json(name = "drop_outs") val dropOuts: Int? = 0,
    @Json(name = "dummy_half_returns") val dummyHalfReturns: Int? = 0,
    @Json(name = "effective_offloads") val effectiveOffloads: Int? = 0,
    @Json(name = "fantasy_points") val fantasyPoints: Int? = 0,
    @Json(name = "field_goal_attempts") val fieldGoalAttempts: Int? = 0,
    @Json(name = "field_goal_misses") val fieldGoalMisses: Int? = 0,
    @Json(name = "field_goals") val fieldGoals: Int? = 0,
    @Json(name = "forced_drop_outs") val forcedDropOuts: Int? = 0,
    @Json(name = "general_play_pass") val generalPlayPass: Int? = 0,
    @Json(name = "goal_misses") val goalMisses: Int? = 0,
    @Json(name = "ineffective_tackles") val ineffectiveTackles: Int? = 0,
    @Json(name = "in_goal_escapes") val inGoalEscapes: Int? = 0,
    @Json(name = "interchanges_on") val interchangesOn: Int? = 0,
    @Json(name = "interchanges_off") val interchangesOff: Int? = 0,
    @Json(name = "kick_errors") val kickErrors: Int? = 0,
    @Json(name = "kick_metres") val kickMetres: Int? = 0,
    @Json(name = "kick_return_metres") val kickReturnMetres: Int? = 0,
    @Json(name = "kick_returns") val kickReturns: Int? = 0,
    @Json(name = "kick_dead") val kicksDead: Int? = 0,
    @Json(name = "kicks_4020") val kicks4020: Int? = 0,
    @Json(name = "last_touch_try_assists") val lastTouchTryAssists: Int? = 0,
    @Json(name = "line_break_assists") val lineBreakAssists: Int? = 0,
    @Json(name = "line_break_causes") val lineBreakCauses: Int? = 0,
    @Json(name = "line_breaks") val lineBreaks: Int? = 0,
    @Json(name = "line_engagements") val lineEngagements: Int? = 0,
    @Json(name = "long_kicks") val longKicks: Int? = 0,
    @Json(name = "missed_tackles") val missedTackles: Int? = 0,
    @Json(name = "off_loads") val offLoads: Int? = 0,
    @Json(name = "one_pass_runs") val onePassRuns: Int? = 0,
    @Json(name = "penalties_conceded") val penaltiesConceded: Int? = 0,
    @Json(name = "play_the_balls") val playTheBalls: Int? = 0,
    @Json(name = "run_metres") val runMetres: Int? = 0,
    @Json(name = "run_7less_metres") val run7LessMetres: Int? = 0,
    @Json(name = "run_8less_metres") val run8LessMetres: Int? = 0,
    @Json(name = "send_offs") val sendOffs: Int? = 0,
    @Json(name = "sin_bins") val sinBins: Int? = 0,
    @Json(name = "steals_one_on_one") val stealsOneOnOne: Int? = 0,
    @Json(name = "try_assists") val tryAssists: Int? = 0,
    @Json(name = "try_causes") val tryCauses: Int? = 0,
    @Json(name = "try_contribution_percentage") val tryContributionPercentage: Int? = 0,
    @Json(name = "try_contributions") val tryContributions: Int? = 0,
    @Json(name = "try_involvements") val tryInvolvements: Int? = 0,
    @Json(name = "twenty_metre_restarts") val weightedKicks: Int? = 0,
    @Json(name = "post_contact_metres") val postContactMetres: Int? = 0
)